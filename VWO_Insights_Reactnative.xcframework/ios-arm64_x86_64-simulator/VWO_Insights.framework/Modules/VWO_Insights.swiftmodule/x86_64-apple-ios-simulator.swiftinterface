// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name VWO_Insights
import CommonCrypto
import CoreData
import CoreTelephony
import Foundation
import OSLog
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension UIKit.UIImage {
  public var pixelWidth: Swift.Int {
    get
  }
  public var pixelHeight: Swift.Int {
    get
  }
  public func pixelColor(x: Swift.Int, y: Swift.Int) -> UIKit.UIColor
}
extension UIKit.UIColor {
  convenience public init(red: Swift.UInt8, green: Swift.UInt8, blue: Swift.UInt8, alpha: Swift.UInt8)
}
extension CoreGraphics.CGBitmapInfo {
  public enum ComponentLayout {
    case bgra
    case abgr
    case argb
    case rgba
    case bgr
    case rgb
    public static func == (a: CoreGraphics.CGBitmapInfo.ComponentLayout, b: CoreGraphics.CGBitmapInfo.ComponentLayout) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var componentLayout: CoreGraphics.CGBitmapInfo.ComponentLayout? {
    get
  }
  public var chromaIsPremultipliedByAlpha: Swift.Bool {
    get
  }
}
@_inheritsConvenienceInitializers @objc(CDEvents) public class CDEvents : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NetworkChangeListener {
  @objc deinit
}
extension VWO_Insights.CDEvents {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<VWO_Insights.CDEvents>
  @objc @NSManaged dynamic public var eventId: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var relativeTimestamp: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ssName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var eventJson: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isSynced: Swift.Bool {
    @objc get
    @objc set
  }
}
@_hasMissingDesignatedInitializers public class VWO {
  public static func configure(accountId: Swift.String, appId: Swift.String, userId: Swift.String?, completion: @escaping (_ result: Swift.Result<Swift.String, any Swift.Error>) -> ())
  public static func triggerSyncVisitorPropEvent(visitorData: Swift.Dictionary<Swift.String, Any>)
  public static func triggerCustomEvent(customEventName: Swift.String, customData: Swift.Dictionary<Swift.String, Any>)
  public static func getSessionURL(source: VWO_Insights.IntegrationsList) -> Swift.String?
  public static func enableIntegrations(integrationCallback: any VWO_Insights.VWOIntegrationCallback)
  public static func startSessionRecording()
  public static func stopSessionRecording()
  public static func setCustomVariable(customVariable: [Swift.String : Swift.String])
  public static func enableLog(logLevel: VWO_Insights.LogLevel = .all)
  public static func setHybridEnable(name: Swift.String?)
  public static func setScreenName(name: Swift.String?)
  public static func setHybrideSDKDetails(isReactSDK: Swift.Bool? = false, values: Any?)
  public static func setCoordinateToHide(CoorditDetails: [Swift.String : CoreFoundation.CGRect])
  public static func reportCrash(crashType: Swift.String, crashScreenName: Swift.String)
  @objc deinit
}
public protocol VWOIntegrationCallback : AnyObject {
  func onVWOIntegrationCompleted(integrations: [VWO_Insights.IntegrationsList])
}
public enum IntegrationsList : Swift.String {
  case CRASHLYTICS
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LogLevel : Swift.Int {
  case debug
  case warning
  case info
  case severe
  case all
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class VWOLog {
  public init()
  final public var INITIALIZATION_LOGS: Swift.String
  final public var SOCKET_LOGS: Swift.String
  final public var DATA_LOGS: Swift.String
  final public var DEBUG_LOGS: Swift.String
  final public var SDK_STATE_LOGS: Swift.String
  final public var UPLOADER_LOGS: Swift.String
  final public var VIEW_VISIBILITY_LOGS: Swift.String
  final public var CAPTURE_SS_EVENTS_QUEUE_LOGS: Swift.String
  final public var SESSION_LOGS: Swift.String
  final public var EVENT_LOGS: Swift.String
  final public var SCREENSHOT_LOGS: Swift.String
  final public var NETWORK_LOGS: Swift.String
  final public var CONFIG_LOGS: Swift.String
  final public var URL_LOGS: Swift.String
  final public var CAMPAIGN_LOGS: Swift.String
  final public var STORAGE_LOGS: Swift.String
  final public var UNCAUGHT: Swift.String
  final public var QUEUE: Swift.String
  final public var FILE_LOGS: Swift.String
  final public var OFF: Swift.Int
  final public var SEVERE: Swift.Int
  final public var WARNING: Swift.Int
  final public var CONFIG: Swift.Int
  final public var INFO: Swift.Int
  final public var ALL: Swift.Int
  public func setLogLevel(logLevel: Swift.Int)
  public func v(tag: Swift.String, msg: Swift.String, function: Swift.String = #function, line: Swift.Int = #line)
  public func v(tag: Swift.String, msg: Swift.String, error: any Swift.Error, function: Swift.String = #function, line: Swift.Int = #line)
  public func d(tag: Swift.String, msg: Swift.String, function: Swift.String = #function, line: Swift.Int = #line)
  public func d(tag: Swift.String, msg: Swift.String, error: any Swift.Error, function: Swift.String = #function, line: Swift.Int = #line)
  public func i(tag: Swift.String, msg: Swift.String, function: Swift.String = #function, line: Swift.Int = #line)
  public func i(tag: Swift.String, msg: Swift.String, error: any Swift.Error, function: Swift.String = #function, line: Swift.Int = #line)
  public func e(tag: Swift.String, error: any Swift.Error, sendToServer: Swift.Bool, function: Swift.String = #function, line: Swift.Int = #line)
  public func e(tag: Swift.String, msg: Swift.String, sendToServer: Swift.Bool, function: Swift.String = #function, line: Swift.Int = #line)
  public func e(tag: Swift.String, msg: Swift.String, error: any Swift.Error, sendToServer: Swift.Bool, function: Swift.String = #function, line: Swift.Int = #line)
  public func w(tag: Swift.String, msg: Swift.String, function: Swift.String = #function, line: Swift.Int = #line)
  public func w(tag: Swift.String, msg: Swift.String, error: any Swift.Error, function: Swift.String = #function, line: Swift.Int = #line)
  public func wtf(tag: Swift.String, msg: Swift.String, function: Swift.String = #function, line: Swift.Int = #line)
  public func wtf(tag: Swift.String, error: any Swift.Error, function: Swift.String = #function, line: Swift.Int = #line)
  public func wtf(tag: Swift.String, msg: Swift.String, error: any Swift.Error, function: Swift.String = #function, line: Swift.Int = #line)
  @objc deinit
}
extension UIKit.UIResponder {
  @_Concurrency.MainActor(unsafe) public var parentViewController: UIKit.UIViewController? {
    get
  }
}
extension CoreGraphics.CGBitmapInfo.ComponentLayout : Swift.Equatable {}
extension CoreGraphics.CGBitmapInfo.ComponentLayout : Swift.Hashable {}
extension VWO_Insights.IntegrationsList : Swift.Equatable {}
extension VWO_Insights.IntegrationsList : Swift.Hashable {}
extension VWO_Insights.IntegrationsList : Swift.RawRepresentable {}
extension VWO_Insights.LogLevel : Swift.Equatable {}
extension VWO_Insights.LogLevel : Swift.Hashable {}
extension VWO_Insights.LogLevel : Swift.RawRepresentable {}
